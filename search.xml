<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>问答网站</title>
      <link href="/2024/06/03/%E9%97%AE%E7%AD%94%E7%BD%91%E7%AB%99/"/>
      <url>/2024/06/03/%E9%97%AE%E7%AD%94%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="问答网站整体框架的设计"><a href="#问答网站整体框架的设计" class="headerlink" title="问答网站整体框架的设计"></a>问答网站整体框架的设计</h1><p>首先，问答平台项目这一个文件夹下,包含以下内容：</p><h2 id="app-py"><a href="#app-py" class="headerlink" title="app.py"></a>app.py</h2><p>这个文件是整个项目的入口文件，也是整个项目的核心文件</p><h2 id="config-py"><a href="#config-py" class="headerlink" title="config.py"></a>config.py</h2><p>这个文件是整个项目的配置文件，里面包含了数据库的配置，以及一些其他的配置信息</p><h2 id="exts-py"><a href="#exts-py" class="headerlink" title="exts.py"></a>exts.py</h2><p>这个文件是整个项目的扩展文件，里面包含了一些flask的扩展，比如flask_sqlalchemy，flask_login等</p><h2 id="静态文件文件夹static"><a href="#静态文件文件夹static" class="headerlink" title="静态文件文件夹static"></a>静态文件文件夹static</h2><p>这个文件夹里面包含了css，js，图片等静态文件</p><h2 id="模板文件文件夹templates"><a href="#模板文件文件夹templates" class="headerlink" title="模板文件文件夹templates"></a>模板文件文件夹templates</h2><p>这个文件夹里面包含了html文件，这些文件是整个项目的页面模板</p><h2 id="blueprints文件夹"><a href="#blueprints文件夹" class="headerlink" title="blueprints文件夹"></a>blueprints文件夹</h2><p>这个文件夹里面包含了蓝图文件，这些文件是整个项目的模块化设计</p><hr><hr><h1 id="User模型的设计以及创建"><a href="#User模型的设计以及创建" class="headerlink" title="User模型的设计以及创建"></a>User模型的设计以及创建</h1><p>本来这写数据库的模型也是写在另一个文件里面之后在app.py里面导入并且用migrate命令创建数据库表，但是，但是他妈的，他妈的我在执行<code>flask db init</code>的时候它他妈的就一直跟我报错说他妈的有一个包不存在，但是他妈的我早尼玛下载了而且在编译器里面导入的时候就他妈没问题他妈的一初始化就给老子报错说这个包不存在。<br>于是我选择了直接用<code>create_all()</code>方法创建数据库表,虽然比较笨，但是好用嘻嘻<br>首先是User模型，肯定是要包含id，用户名，密码，邮箱，注册时间这些字段，其中id是主键，username是用户名，password是密码，email是邮箱，join_time是注册时间，所以User模型的设计如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义各个模型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">50</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    password = db.Column(db.String(<span class="number">100</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">100</span>),nullable = <span class="literal">False</span>)</span><br><span class="line">    join_time = db.Column(db.DateTime, default=datetime.now())<span class="comment">#default要的是一个函数而不是一个返回值，所以要用datetime.now而不是datetime.datetime.now()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    db.create_all() <span class="comment"># 创建数据库</span></span><br></pre></td></tr></table></figure><p>之后当然也可能会增加其他的数据表的，但是暂时先这样嘻嘻</p><hr><hr><h1 id="根目录的展示以及注册页面的展示"><a href="#根目录的展示以及注册页面的展示" class="headerlink" title="根目录的展示以及注册页面的展示"></a>根目录的展示以及注册页面的展示</h1><p>这个地方和之前学的基础还不太一样，之前是直接写在app.py里面的，现在是要写在那个蓝图文件夹里面，之后再app.py里面直接注册蓝图，这么做的好处其实也就是可以一定程度的分离代码，让后面的维护啥的更方便</p><p>pycharm的话好像在创建python包的时候是不用去创建一个__init__.py文件的，它会自己帮你创建，但是vscode不行，vscode的话需要自己在blueprints文件夹下手动去创建一个__init__.py文件，让后再在blueprints文件夹下创建视图文件，今天就暂时只创建了两个视图文件，一个是和问答相关的qa.py，一个是和授权相关的auth.py。</p><p>在蓝图文件夹下的每一个视图文件里面会有一个蓝图对象，这个蓝图对象是用来注册路由的，所以在视图文件里面我们需要先导入蓝图对象，然后在蓝图对象里面注册路由。意思就是，怎么解释呢，他妈的给个例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 和授权相关的</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint,render_template</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建蓝图对象, 并设置url前缀，意思就是以后访问蓝图时，需要加上/auth</span></span><br><span class="line">bp = Blueprint(<span class="string">&#x27;auth&#x27;</span>, __name__,url_prefix=<span class="string">&#x27;/auth&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/register&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;register.html&quot;</span>)</span><br></pre></td></tr></table></figure><p>意思就是以后在浏览器访问登录或者注册页面时，虽然视图函数里面的url是单单的&#x2F;login或者&#x2F;register，但是实际上访问的url是&#x2F;auth&#x2F;login或者&#x2F;auth&#x2F;register，因为我们在蓝图对象里面设置了url_prefix&#x3D;’&#x2F;auth’。</p><h2 id="qa-py"><a href="#qa-py" class="headerlink" title="qa.py"></a>qa.py</h2><p>今天在qa.py文件里面就暂时只写了一个根目录的视图函数，用于展示index页面，代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="auth-py"><a href="#auth-py" class="headerlink" title="auth.py"></a>auth.py</h2><p>这个文件里面暂时只写了一个register页面的视图函数，用于展示注册页面，代码其实就是上面蓝图的例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 和授权相关的</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint,render_template</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建蓝图对象, 并设置url前缀，意思就是以后访问蓝图时，需要加上/auth</span></span><br><span class="line">bp = Blueprint(<span class="string">&#x27;auth&#x27;</span>, __name__,url_prefix=<span class="string">&#x27;/auth&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/register&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;register.html&quot;</span>)</span><br></pre></td></tr></table></figure><p>最后的整体的项目代码我会在整个项目结束的时候的最后一篇文章给出来</p><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask的数据库的使用</title>
      <link href="/2024/06/02/flask%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/06/02/flask%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="flask连接数据库"><a href="#flask连接数据库" class="headerlink" title="flask连接数据库"></a>flask连接数据库</h1><p>其实和python连接数据库差不多是一个道理，首先无非就是安装一下某些插件，python的是安装pymysql，flask的则是安装flask-sqlalchemy。<br>安装完成后直接导入就好</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br></pre></td></tr></table></figure><p>然后在创建app对象的时候，实例化一个SQLAlchemy对象，并传入数据库来连接信息的配置比如主机名、端口、用户名、密码、数据库名等。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置数据库连接信息</span></span><br><span class="line"><span class="comment">#mysql所在主机名</span></span><br><span class="line">HOSTNAME = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line"><span class="comment">#mysql端口号</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line"><span class="comment">#数据库用户名</span></span><br><span class="line">USERNAME = <span class="string">&#x27;root&#x27;</span></span><br><span class="line"><span class="comment">#数据库密码</span></span><br><span class="line">PASSWORD = <span class="string">&#x27;20021229&#x27;</span></span><br><span class="line"><span class="comment">#数据库名</span></span><br><span class="line">DATABASE = <span class="string">&#x27;flask_test&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] =<span class="string">&#x27;mysql+pymysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;?charset=utf8mb4&#x27;</span>.<span class="built_in">format</span>(USERNAME, PASSWORD, HOSTNAME, PORT, DATABASE)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在app.config中配置数据库连接信息</span></span><br><span class="line"><span class="comment">#然后使用sqlalchmy（app）来创建数据库对象</span></span><br><span class="line"><span class="comment">#sqlalchmy的配置信息在app.config中</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure><p>理论上来说就已经连接完毕了，但是总得测试一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    <span class="keyword">with</span> db.engine.connect() <span class="keyword">as</span> conn:</span><br><span class="line">        rs = conn.execute(text(<span class="string">&quot;select 1&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(rs.fetchone())</span><br></pre></td></tr></table></figure><p>如果能打印出1，说明连接成功。</p><p>整体的连接数据库的代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy </span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置数据库连接信息</span></span><br><span class="line"><span class="comment">#mysql所在主机名</span></span><br><span class="line">HOSTNAME = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line"><span class="comment">#mysql端口号</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line"><span class="comment">#数据库用户名</span></span><br><span class="line">USERNAME = <span class="string">&#x27;root&#x27;</span></span><br><span class="line"><span class="comment">#数据库密码</span></span><br><span class="line">PASSWORD = <span class="string">&#x27;20021229&#x27;</span></span><br><span class="line"><span class="comment">#数据库名</span></span><br><span class="line">DATABASE = <span class="string">&#x27;flask_test&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] =<span class="string">&#x27;mysql+pymysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;?charset=utf8mb4&#x27;</span>.<span class="built_in">format</span>(USERNAME, PASSWORD, HOSTNAME, PORT, DATABASE)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在app.config中配置数据库连接信息</span></span><br><span class="line"><span class="comment">#然后使用sqlalchmy（app）来创建数据库对象</span></span><br><span class="line"><span class="comment">#sqlalchmy的配置信息在app.config中</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    <span class="keyword">with</span> db.engine.connect() <span class="keyword">as</span> conn:</span><br><span class="line">        rs = conn.execute(text(<span class="string">&quot;select 1&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(rs.fetchone())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><hr><hr><h1 id="连接了数据库之后进行表的创建"><a href="#连接了数据库之后进行表的创建" class="headerlink" title="连接了数据库之后进行表的创建"></a>连接了数据库之后进行表的创建</h1><p>这里就开始比较有意思了，想一想，他妈的常规的数据库的创建啊还是什么增删改查啥啥啥的都他妈用的sql语言，他妈的flask直接可以不用sql可以，直接用python的语法来操作数据库，但不是说在底层也不用sql啊，在底层还是用sql的，只不过我们写代码的不用sql而已<br>eg：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义User模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;users&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">50</span>),nullable=<span class="literal">False</span>)</span><br><span class="line">    age = db.Column(db.Integer,nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义Article模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;articles&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">50</span>),nullable=<span class="literal">False</span>)</span><br><span class="line">    content = db.Column(db.Text,nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#添加作者外键</span></span><br><span class="line">    author_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;users.id&#x27;</span>))</span><br><span class="line">    <span class="comment">#添加作者对象,backref为反向引用,会自动加载作者的文章，lazy为动态加载</span></span><br><span class="line">    author = db.relationship(<span class="string">&#x27;User&#x27;</span>, backref=db.backref(<span class="string">&#x27;articles&#x27;</span>, lazy=<span class="string">&#x27;dynamic&#x27;</span>))</span><br></pre></td></tr></table></figure><p>这里定义了一个User模型，这个模型对应数据库中的users表，有id、name、age三个字段，其中id为主键，name和age为非空字段。但这也只是定义了而已，在数据库中的表是没有创建的，创建的有两种方法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    db.create_all()</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"><span class="comment">#使用Migrate来管理数据库的迁移</span></span><br><span class="line">migrate = Migrate(app, db)</span><br><span class="line"><span class="comment">#ORM模型映射三部曲（在控制台执行）</span></span><br><span class="line"><span class="comment">#flask db init  #初始化迁移环境，只需要执行一次</span></span><br><span class="line"><span class="comment">#flask db migrate #生成迁移脚本</span></span><br><span class="line"><span class="comment">#flask db upgrade  #执行迁移脚本</span></span><br><span class="line"><span class="comment">#定义User模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;users&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">50</span>),nullable=<span class="literal">False</span>)</span><br><span class="line">    age = db.Column(db.Integer,nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义Article模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;articles&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">50</span>),nullable=<span class="literal">False</span>)</span><br><span class="line">    content = db.Column(db.Text,nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#添加作者外键</span></span><br><span class="line">    author_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;users.id&#x27;</span>))</span><br><span class="line">    <span class="comment">#添加作者对象,backref为反向引用,会自动加载作者的文章，lazy为动态加载</span></span><br><span class="line">    author = db.relationship(<span class="string">&#x27;User&#x27;</span>, backref=db.backref(<span class="string">&#x27;articles&#x27;</span>, lazy=<span class="string">&#x27;dynamic&#x27;</span>))</span><br></pre></td></tr></table></figure><p>第一种create_all()方法是直接在app.py中创建所有表，比较直接，但是如果要修改表的信息的话是不能直接修改的，这个就比较麻烦了<br>第二种方法是使用flask-migrate来管理数据库的迁移，这个方法比较复杂，但是比较灵活，可以随时修改表结构，只需要修改模型定义，然后执行flask db migrate生成迁移脚本，然后执行flask db upgrade执行迁移脚本，这样就可以自动生成数据库表了。</p><hr><hr><h1 id="连接了数据库之后进行数据的增删改查"><a href="#连接了数据库之后进行数据的增删改查" class="headerlink" title="连接了数据库之后进行数据的增删改查"></a>连接了数据库之后进行数据的增删改查</h1><h2 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#增加数据</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/add&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_user</span>():</span><br><span class="line">    <span class="comment">#创建ORM对象</span></span><br><span class="line">    user = User(name=<span class="string">&#x27;Tom&#x27;</span>,age=<span class="number">25</span>)</span><br><span class="line">    <span class="comment">#将ORM对象添加到session中</span></span><br><span class="line">    db.session.add(user)</span><br><span class="line">    <span class="comment">#将session中的数据提交到数据库</span></span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;User added successfully&#x27;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除数据</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/delete&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_user</span>():</span><br><span class="line">    user = User.query.filter_by(name=<span class="string">&#x27;Tom&#x27;</span>).first()</span><br><span class="line">    db.session.delete(user)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;User deleted successfully&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#更新数据</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/update&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_user</span>():</span><br><span class="line">    <span class="comment">#根据filter_by方法查找</span></span><br><span class="line">    user = User.query.filter_by(name=<span class="string">&#x27;Tom&#x27;</span>).first()</span><br><span class="line">    user.age = <span class="number">26</span></span><br><span class="line">    <span class="comment">#将session中的数据提交到数据库</span></span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;User updated successfully&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询数据</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/query&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_user</span>():</span><br><span class="line">    <span class="comment">#根据filter_by方法查找</span></span><br><span class="line">    users = User.query.filter_by(name=<span class="string">&#x27;Tom&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;user.<span class="built_in">id</span>&#125;</span>,<span class="subst">&#123;user.name&#125;</span>,<span class="subst">&#123;user.age&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;User queried successfully&#x27;</span></span><br></pre></td></tr></table></figure><p>这个flask数据库查询还有一个比较有意思的点，在前面创建数据库的时候其实已经给出来了，那个articels表的作者外键就没什么好说的了，知道数据库的都明白，有意思的是外键下面的那个玩意儿</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加作者对象,backref为反向引用,会自动加载作者的文章，lazy为动态加载</span></span><br><span class="line">author = db.relationship(<span class="string">&#x27;User&#x27;</span>, backref=db.backref(<span class="string">&#x27;articles&#x27;</span>, lazy=<span class="string">&#x27;dynamic&#x27;</span>))</span><br></pre></td></tr></table></figure><p>这个玩意儿就是关系引用，他可以让你直接获取到作者的文章，而不需要再去查询作者的文章，这就是关系引用的好处，而且还可以动态加载，就是说你只要查询作者，他的文章就自动加载了，例子在这儿：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询作者Tom的文章</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/author/query&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_author_article</span>():</span><br><span class="line">    <span class="comment">#根据filter_by方法查找</span></span><br><span class="line">    author = User.query.filter_by(name=<span class="string">&#x27;Tom&#x27;</span>).first()</span><br><span class="line">    <span class="keyword">for</span> article <span class="keyword">in</span> author.articles:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;article.<span class="built_in">id</span>&#125;</span>,<span class="subst">&#123;article.title&#125;</span>,<span class="subst">&#123;article.content&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Author article queried successfully&#x27;</span></span><br></pre></td></tr></table></figure><p>增删改查的整体代码搁这儿：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy </span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置数据库连接信息</span></span><br><span class="line"><span class="comment">#mysql所在主机名</span></span><br><span class="line">HOSTNAME = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line"><span class="comment">#mysql端口号</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line"><span class="comment">#数据库用户名</span></span><br><span class="line">USERNAME = <span class="string">&#x27;root&#x27;</span></span><br><span class="line"><span class="comment">#数据库密码</span></span><br><span class="line">PASSWORD = <span class="string">&#x27;20021229&#x27;</span></span><br><span class="line"><span class="comment">#数据库名</span></span><br><span class="line">DATABASE = <span class="string">&#x27;flask_test&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] =<span class="string">&#x27;mysql+pymysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;?charset=utf8mb4&#x27;</span>.<span class="built_in">format</span>(USERNAME, PASSWORD, HOSTNAME, PORT, DATABASE)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在app.config中配置数据库连接信息</span></span><br><span class="line"><span class="comment">#然后使用sqlalchmy（app）来创建数据库对象</span></span><br><span class="line"><span class="comment">#sqlalchmy的配置信息在app.config中</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用Migrate来管理数据库的迁移</span></span><br><span class="line">migrate = Migrate(app, db)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ORM模型映射三部曲</span></span><br><span class="line"><span class="comment">#flask db init  #初始化迁移环境，只需要执行一次</span></span><br><span class="line"><span class="comment">#flask db migrate #生成迁移脚本</span></span><br><span class="line"><span class="comment">#flask db upgrade  #执行迁移脚本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义User模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;users&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">50</span>),nullable=<span class="literal">False</span>)</span><br><span class="line">    age = db.Column(db.Integer,nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义Article模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;articles&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">50</span>),nullable=<span class="literal">False</span>)</span><br><span class="line">    content = db.Column(db.Text,nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#添加作者外键</span></span><br><span class="line">    author_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;users.id&#x27;</span>))</span><br><span class="line">    <span class="comment">#添加作者对象,backref为反向引用,会自动加载作者的文章，lazy为动态加载</span></span><br><span class="line">    author = db.relationship(<span class="string">&#x27;User&#x27;</span>, backref=db.backref(<span class="string">&#x27;articles&#x27;</span>, lazy=<span class="string">&#x27;dynamic&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#with app.app_context():</span></span><br><span class="line"><span class="comment">#    db.create_all()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#增加数据</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/add&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_user</span>():</span><br><span class="line">    <span class="comment">#创建ORM对象</span></span><br><span class="line">    user = User(name=<span class="string">&#x27;铁头&#x27;</span>,age=<span class="number">25</span>)</span><br><span class="line">    <span class="comment">#将ORM对象添加到session中</span></span><br><span class="line">    db.session.add(user)</span><br><span class="line">    <span class="comment">#将session中的数据提交到数据库</span></span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;User added successfully&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询数据</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/query&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_user</span>():</span><br><span class="line">    <span class="comment">#根据filter_by方法查找</span></span><br><span class="line">    users = User.query.filter_by(name=<span class="string">&#x27;铁头&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;user.<span class="built_in">id</span>&#125;</span>,<span class="subst">&#123;user.name&#125;</span>,<span class="subst">&#123;user.age&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;User queried successfully&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#更新数据</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/update&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_user</span>():</span><br><span class="line">    <span class="comment">#根据filter_by方法查找</span></span><br><span class="line">    user = User.query.filter_by(name=<span class="string">&#x27;铁头&#x27;</span>).first()</span><br><span class="line">    user.age = <span class="number">26</span></span><br><span class="line">    <span class="comment">#将session中的数据提交到数据库</span></span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;User updated successfully&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除数据</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/delete&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_user</span>():</span><br><span class="line">    user = User.query.filter_by(name=<span class="string">&#x27;铁头&#x27;</span>).first()</span><br><span class="line">    db.session.delete(user)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;User deleted successfully&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加新的文章</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/article/add&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_article</span>():</span><br><span class="line">    <span class="comment">#创建ORM对象</span></span><br><span class="line">    article = Article(title=<span class="string">&#x27;Flask 教程&#x27;</span>,content=<span class="string">&#x27;Flask是一个轻量级的Python Web框架,它可以快速开发一个Web应用。&#x27;</span>,author_id=<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#将作者对象添加到session中</span></span><br><span class="line">    db.session.add(article)</span><br><span class="line">    <span class="comment">#将session中的数据提交到数据库</span></span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Article added successfully&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询文章</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/article/query&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_article</span>():</span><br><span class="line">    <span class="comment">#根据filter_by方法查找</span></span><br><span class="line">    articles = Article.query.filter_by(title=<span class="string">&#x27;Flask 教程&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">for</span> article <span class="keyword">in</span> articles:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;article.<span class="built_in">id</span>&#125;</span>,<span class="subst">&#123;article.title&#125;</span>,<span class="subst">&#123;article.content&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Article queried successfully&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询作者的文章</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/author/query&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_author_article</span>():</span><br><span class="line">    <span class="comment">#根据filter_by方法查找</span></span><br><span class="line">    author = User.query.filter_by(name=<span class="string">&#x27;Tom&#x27;</span>).first()</span><br><span class="line">    <span class="keyword">for</span> article <span class="keyword">in</span> author.articles:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;article.<span class="built_in">id</span>&#125;</span>,<span class="subst">&#123;article.title&#125;</span>,<span class="subst">&#123;article.content&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Author article queried successfully&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#更新文章</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/article/update&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_article</span>():</span><br><span class="line">    <span class="comment">#根据filter_by方法查找</span></span><br><span class="line">    article = Article.query.filter_by(title=<span class="string">&#x27;Flask 教程&#x27;</span>).first()</span><br><span class="line">    article.content = <span class="string">&#x27;Flask是一个轻量级的Python Web框架，它可以快速开发一个Web应用。&#x27;</span></span><br><span class="line">    <span class="comment">#将session中的数据提交到数据库</span></span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Article updated successfully&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除文章</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/article/delete&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_article</span>():</span><br><span class="line">    article = Article.query.filter_by(title=<span class="string">&#x27;Flask 教程&#x27;</span>).first()</span><br><span class="line">    db.session.delete(article)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Article deleted successfully&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask的结构以及模板渲染</title>
      <link href="/2024/06/01/flask%E7%9A%84%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF%E6%B8%B2%E6%9F%93/"/>
      <url>/2024/06/01/flask%E7%9A%84%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF%E6%B8%B2%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="flask的结构"><a href="#flask的结构" class="headerlink" title="flask的结构"></a>flask的结构</h1><p>flask的结构主要分为三个部分：</p><ul><li>应用对象：Flask类的实例，它是整个应用的核心对象，负责处理请求、响应、路由、模板等。</li><li>路由：Flask通过路由来匹配用户请求的URL，并调用相应的视图函数进行处理。</li><li>模板：Flask使用模板引擎来渲染HTML页面，模板可以使得HTML页面更加美观、更加动态。</li></ul><p>他妈的上面那些都是vscode的自动生成的，我是觉得从代码的角度来看的话，flask的结构应该是这样的：</p><ul><li>创建flask类的实例</li><li>定义视图函数</li><li>启动应用</li></ul><h2 id="flask类的实例"><a href="#flask类的实例" class="headerlink" title="flask类的实例"></a>flask类的实例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建flask类的实例</span></span><br><span class="line">app = Flask(__name__)</span><br></pre></td></tr></table></figure><h2 id="定义视图函数"><a href="#定义视图函数" class="headerlink" title="定义视图函数"></a>定义视图函数</h2><p>这里的视图函数就是处理用户请求的函数，其中的return返回值就是响应给用户的结果。而视图函数的定义需要使用装饰器@app.route()来绑定路由。括号里的路由就是用户请求的URL。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义视图函数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;嘻嘻!&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h2><p>这个run里面还可以更改host、port等。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="基本结构代码"><a href="#基本结构代码" class="headerlink" title="基本结构代码"></a>基本结构代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从flask模块中导入Flask类</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建Flask类的实例</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义视图函数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;嘻嘻!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.debug模式</span></span><br><span class="line"><span class="comment">#1.1debug模式下，代码发生变化后，会自动重启服务器，并更新代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.修改host和port</span></span><br><span class="line"><span class="comment">#2.1修改host和port，可以指定服务器运行的地址和端口</span></span><br><span class="line"><span class="comment">#2.2就是让其他的设备能够访问我的flask应用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>,host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">9000</span>)</span><br></pre></td></tr></table></figure><hr><hr><h1 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h1><p>flask使用模板引擎来渲染HTML页面，模板可以使得HTML页面更加美观、更加动态。</p><h2 id="什么是模板"><a href="#什么是模板" class="headerlink" title="什么是模板"></a>什么是模板</h2><p>模板就是一个HTML文件，里面可以包含一些变量，当用户请求这个页面时，模板引擎会把变量替换成实际的值，生成一个完整的HTML页面。</p><h2 id="如何使用模板"><a href="#如何使用模板" class="headerlink" title="如何使用模板"></a>如何使用模板</h2><p>flask使用Jinja2模板引擎，Jinja2是Python的一个模板引擎。</p><h3 id="安装Jinja2"><a href="#安装Jinja2" class="headerlink" title="安装Jinja2"></a>安装Jinja2</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install Jinja2</span><br></pre></td></tr></table></figure><h3 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入render_template函数</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义视图函数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment">#渲染模板</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在templates文件夹下创建一个index.html文件，内容如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="过滤器的使用"><a href="#过滤器的使用" class="headerlink" title="过滤器的使用"></a>过滤器的使用</h3><p>模板引擎支持过滤器，可以对变量进行一些处理，比如格式化时间、格式化数字等。<br>过滤器的定义格式为<code>&#123;&#123;变量名|过滤器名&#125;&#125;</code>，过滤器名可以自定义，也可以使用内置的过滤器。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入datetime模块</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment">#定义过滤器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">datetimeformat</span>(<span class="params">value, <span class="built_in">format</span>=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">return</span> value.strftime(<span class="built_in">format</span>)</span><br><span class="line"></span><br><span class="line">app.add_template_filter(datetimeformat,<span class="string">&quot;dformat&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤器的使用</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/filter&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter</span>():</span><br><span class="line">    user = User(username=<span class="string">&#x27;zane&#x27;</span>, email=<span class="string">&#x27;zane@example.com&#x27;</span>)</span><br><span class="line">    mytime = datetime.now()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;filter.html&#x27;</span>, user=user, mytime=mytime)</span><br></pre></td></tr></table></figure><p>其中的filter.html内容如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>过滤器的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;user.username&#125;&#125;-&#123;&#123;user.username|length&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;mytime|dformat&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="控制语句的使用"><a href="#控制语句的使用" class="headerlink" title="控制语句的使用"></a>控制语句的使用</h3><p>模板引擎支持控制语句，比如if、for等，可以根据条件渲染不同的内容。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#控制语句</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/control&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">control</span>():</span><br><span class="line">    age = <span class="number">16</span></span><br><span class="line">    books = [&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;三国演义&#x27;</span>,<span class="string">&#x27;author&#x27;</span>:<span class="string">&#x27;老罗&#x27;</span>&#125;,</span><br><span class="line">             &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;活着&#x27;</span>,<span class="string">&#x27;author&#x27;</span>:<span class="string">&#x27;老余&#x27;</span>&#125;]</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;control.html&#x27;</span>,age=age,books=books)</span><br></pre></td></tr></table></figure><p>其中的control.html内容如下（其中for循环有一点要注意的就是它不像尼玛python那样是可以break的,它他妈是必须要把循环都跑完，还有就是jinja2的语法和python的语法也有一点不一样，有一个if就一定要有endif，for就一定要有endfor）：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>控制语句的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% if age &gt; 18 %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>妈的老东西<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% elif age == 18 %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>欢迎来到成年人的世界<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>妈的小崽子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% for book in books %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>图书名称：&#123;&#123; book.name &#125;&#125;, 作者：&#123;&#123; book.author &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h3><p>模板继承可以让多个模板共享相同的部分，减少代码重复。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#模板继承</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/base&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;base.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/child1&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">child</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;child1.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/child2&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">child2</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;child2.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/static&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">staticc</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;static.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>其中的base.html内容如下（其中<code>&#123;% block %&#125;和&#123;% endblock %&#125;</code>之间的内容都是由子页面自定义的）：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ur</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ur</span>&gt;</span></span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>这是底部的标签<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中的child1.html内容如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是子页面1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>子页面1的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>其中的child2.html内容如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是子页面2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>子页面2的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><p>静态文件就是一些图片、CSS、JS等文件，这些文件可以直接通过url访问，不需要经过模板引擎的处理。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#静态文件</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/static&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">staticc</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;static.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>其中的static.html内容如下（static文件夹下有css、js、images文件夹,在static.html中通过url_for函数来获取静态文件）：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Static Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;css/style.css&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;js/my.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;images/ee7f8305e45a032d431eba27b4ef7a4.jpg&#x27;) &#125;&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中style.css内容如下</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>my.js内容如下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;Hello&quot;</span>)</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/29/hello-world/"/>
      <url>/2024/05/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
